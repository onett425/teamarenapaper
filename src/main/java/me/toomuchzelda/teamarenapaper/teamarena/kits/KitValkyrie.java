package me.toomuchzelda.teamarenapaper.teamarena.kits;

import java.util.List;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeInstance;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;

import me.toomuchzelda.teamarenapaper.Main;
import me.toomuchzelda.teamarenapaper.teamarena.damage.DamageEvent;
import me.toomuchzelda.teamarenapaper.teamarena.kits.abilities.Ability;
import net.kyori.adventure.text.Component;
import net.minecraft.network.chat.TextComponent;

//Kit Description:
/*
// https://athiosmc.com/threads/kit-valkiryie.411/
    Kit Goal: Initiator / Fighter kit w/ cool melee mechanics

    Weapon: Netherite Axe w/ Sharp 1 + KB 1
    Passive: Slow 1 + Mining Fatigue 5
    
    Sub-Ability: Spin Attack 
        Attacks have 1.5 second charge up time, 1.5 second cooldown
        Attacks hit ALL enemies within 3 block range
        Damage based on distance from player
            [0,1) block = 0.75 dmg
            [1,2] block = x1 dmg
            [2, 3) block = x1.5 dmg (sweet spot)


	Main Ability: Gravity Bomb
		Charge CD: 12 seconds
        Max Charges: 2
        Detonation Time: 2 seconds

        Launches an eye of ender like an explosive grenade, 
        which will detonate after a short fuse time.
        (Can be thrown with low or high velocity depending on type of click)

	    Gravity Bomb Detonation
            Upon detonation, the bomb will pull enemies within r = 3 towards itself
            Before exploding and dealing light damage and knockback
            (It should be adjusted so valk can combo gravity bomb into sweet spot reliably)
*/

//Use Pitch and Yaw to manipulate player looking direction
// https://bukkit.org/threads/1-11-the-complete-guide-to-item-nbttags-attributes.411448/#post-3349095
/**
 * @author onett425
 */
public class KitValkyrie extends Kit{

    public static final ItemStack VALK_AXE;
    public static final AttributeModifier AXE_ATTACK_SPEED = new AttributeModifier("Valk Axe Attack Speed", -999998.99 , AttributeModifier.Operation.ADD_NUMBER);
    //True Value: 
    public static final AttributeModifier AXE_SLOW = new AttributeModifier("Valk Axe Slow", -0.70 , AttributeModifier.Operation.ADD_SCALAR);
    public static final int AXE_WINDUP = 30;
    public static final int AXE_CD = 30;
    public static final int ATTACK_RADIUS = 3;
    //Bonus damage is applied additively, the below values represent damage added
    public static final int NORMAL_BONUS = 2;
    public static final int SWEET_SPOT_BONUS = 4;

    static{
        VALK_AXE = new ItemStack(Material.NETHERITE_AXE);
        ItemMeta valkMeta = VALK_AXE.getItemMeta();
        valkMeta.addEnchant(Enchantment.DAMAGE_ALL, 10, true);
        valkMeta.addEnchant(Enchantment.KNOCKBACK, 1, false);        
        valkMeta.addAttributeModifier(Attribute.GENERIC_ATTACK_SPEED, AXE_ATTACK_SPEED);
        valkMeta.addAttributeModifier(Attribute.GENERIC_MOVEMENT_SPEED, AXE_SLOW);
        VALK_AXE.setItemMeta(valkMeta); 
    }

    public KitValkyrie(){
        super("Valkyrie", "use the mobility idea i had where it can throw a grenade and teleport to it",
				Material.NETHERITE_AXE);
        ItemStack helm = new ItemStack(Material.IRON_HELMET);
        ItemStack chest = new ItemStack(Material.DIAMOND_CHESTPLATE);
        ItemMeta chestMeta = chest.getItemMeta();
        chestMeta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 1, false);
        chest.setItemMeta(chestMeta);
        ItemStack legs = new ItemStack(Material.CHAINMAIL_LEGGINGS);
        ItemStack boots = new ItemStack(Material.IRON_BOOTS);
        ItemMeta bootMeta = boots.getItemMeta();
        bootMeta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 1, false);
        boots.setItemMeta(bootMeta);

        this.setArmor(helm, chest, legs, boots);
        setItems(VALK_AXE);
        setAbilities(new ValkyrieAbility());
    }

    public static class ValkyrieAbility extends Ability{

        public void removeAbility(Player player) {
			player.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).removeModifier(AXE_SLOW);
            player.getAttribute(Attribute.GENERIC_ATTACK_SPEED).removeModifier(AXE_ATTACK_SPEED);
		}

        public void onAttemptedAttack(DamageEvent event) {
            Player player = (Player) event.getAttacker();
            //Damage should not be generated by the actual axe hit, so vanilla attacks are cancelled
            //if(player.getInventory().getItemInMainHand().getType() == Material.NETHERITE_AXE){
            //    event.setCancelled(true);
            //}   
        }

        public void onPlayerTick(Player player) {
            //stolen from jacky
            /*
            AttributeInstance instance = player.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED);
			if(player.getInventory().getItemInMainHand().getType() == Material.NETHERITE_AXE){
				if(!instance.getModifiers().contains(AXE_SLOW)) {
					instance.addModifier(AXE_SLOW);
				}
			}
			else{
				if(instance.getModifiers().contains(AXE_SLOW)){
					instance.removeModifier(AXE_SLOW);
				}
			}

            AttributeInstance attackInstance = player.getAttribute(Attribute.GENERIC_ATTACK_SPEED);
            if(player.getInventory().getItemInMainHand().getType() == Material.NETHERITE_AXE){
                if(!attackInstance.getModifiers().contains(AXE_ATTACK_SPEED)) {
					attackInstance.addModifier(AXE_ATTACK_SPEED);
				}
			}
			else{
                if(attackInstance.getModifiers().contains(AXE_ATTACK_SPEED)){
					attackInstance.removeModifier(AXE_ATTACK_SPEED);
				}
			}
            */
        }

        public void onInteract(PlayerInteractEvent event) {
            Player player = event.getPlayer();
            Material mat = event.getMaterial();
            Action action = event.getAction();

            if((action == Action.LEFT_CLICK_AIR || action == Action.LEFT_CLICK_BLOCK) && mat == Material.NETHERITE_AXE){
                if(player.getCooldown(Material.NETHERITE_AXE) != 0){
                    event.setCancelled(true);
                }
                else{
                    BukkitTask runnable = new BukkitRunnable() {
                        int duration = AXE_WINDUP;
                        //isAxe ensures that the axe is held in hand for the whole wind-up time.
                        boolean isAxe = true;
                        public void run(){
                            if(duration <= 0){
                                valkAttack(player);
                                cancel();
                            }
                            else{
                                duration--;
                                isAxe = player.getInventory().getItemInMainHand().getType() == Material.NETHERITE_AXE;
                                if(!isAxe){
                                    cancel();
                                }
                            }
                        }
                    }.runTaskTimer(Main.getPlugin(), 0, 0);;
                }
            }
        }

        public void valkAttack(Player player){
            List<Entity> nearbyEnt = player.getNearbyEntities(ATTACK_RADIUS*2, ATTACK_RADIUS*2, ATTACK_RADIUS*2);
            Location loc = player.getLocation();
            for(Entity entity: nearbyEnt){
                if (entity instanceof LivingEntity victim && !victim.getType().equals(EntityType.ARMOR_STAND)){
                    double distanceSq = victim.getLocation().distanceSquared(loc);
                    player.attack(victim);

                    if(distanceSq < 1){
                        player.sendMessage(Component.text("Bad hit"));
                    }

                    if(distanceSq >= 1 && distanceSq < 4){
                        victim.damage(NORMAL_BONUS, player);
                        player.sendMessage(Component.text("normal hit"));
                    }
                    else if (distanceSq >= 4 && distanceSq < 9){
                        victim.damage(SWEET_SPOT_BONUS, player);
                        player.sendMessage(Component.text("sweet hit"));
                    }
                }
            }
            player.setCooldown(Material.NETHERITE_AXE, AXE_CD);
        }
    }
}
